// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type Classification string

const (
	ClassificationAll  Classification = "all"
	ClassificationKill Classification = "kill"
	ClassificationLose Classification = "lose"
)

var AllClassification = []Classification{
	ClassificationAll,
	ClassificationKill,
	ClassificationLose,
}

func (e Classification) IsValid() bool {
	switch e {
	case ClassificationAll, ClassificationKill, ClassificationLose:
		return true
	}
	return false
}

func (e Classification) String() string {
	return string(e)
}

func (e *Classification) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Classification(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Classification", str)
	}
	return nil
}

func (e Classification) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Entity string

const (
	EntityAll           Entity = "all"
	EntityCharacter     Entity = "character"
	EntityCorporation   Entity = "corporation"
	EntityAlliance      Entity = "alliance"
	EntityShip          Entity = "ship"
	EntityShipGroup     Entity = "shipGroup"
	EntitySystem        Entity = "system"
	EntityConstellation Entity = "constellation"
	EntityRegion        Entity = "region"
)

var AllEntity = []Entity{
	EntityAll,
	EntityCharacter,
	EntityCorporation,
	EntityAlliance,
	EntityShip,
	EntityShipGroup,
	EntitySystem,
	EntityConstellation,
	EntityRegion,
}

func (e Entity) IsValid() bool {
	switch e {
	case EntityAll, EntityCharacter, EntityCorporation, EntityAlliance, EntityShip, EntityShipGroup, EntitySystem, EntityConstellation, EntityRegion:
		return true
	}
	return false
}

func (e Entity) String() string {
	return string(e)
}

func (e *Entity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Entity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Entity", str)
	}
	return nil
}

func (e Entity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
