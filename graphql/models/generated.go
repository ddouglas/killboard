// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type Entity string

const (
	EntityAll         Entity = "all"
	EntityCharacter   Entity = "character"
	EntityCorporation Entity = "corporation"
	EntityAlliance    Entity = "alliance"
	EntityShip        Entity = "ship"
)

var AllEntity = []Entity{
	EntityAll,
	EntityCharacter,
	EntityCorporation,
	EntityAlliance,
	EntityShip,
}

func (e Entity) IsValid() bool {
	switch e {
	case EntityAll, EntityCharacter, EntityCorporation, EntityAlliance, EntityShip:
		return true
	}
	return false
}

func (e Entity) String() string {
	return string(e)
}

func (e *Entity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Entity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Entity", str)
	}
	return nil
}

func (e Entity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
