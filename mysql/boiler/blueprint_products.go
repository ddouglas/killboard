// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// BlueprintProduct is an object representing the database table.
type BlueprintProduct struct {
	TypeID        uint      `boil:"type_id" json:"typeID" toml:"typeID" yaml:"typeID"`
	ActivityID    uint      `boil:"activity_id" json:"activityID" toml:"activityID" yaml:"activityID"`
	ProductTypeID uint      `boil:"product_type_id" json:"productTypeID" toml:"productTypeID" yaml:"productTypeID"`
	Quantity      uint      `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	CreatedAt     time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`

	R *blueprintProductR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L blueprintProductL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlueprintProductColumns = struct {
	TypeID        string
	ActivityID    string
	ProductTypeID string
	Quantity      string
	CreatedAt     string
	UpdatedAt     string
}{
	TypeID:        "type_id",
	ActivityID:    "activity_id",
	ProductTypeID: "product_type_id",
	Quantity:      "quantity",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

// Generated where

var BlueprintProductWhere = struct {
	TypeID        whereHelperuint
	ActivityID    whereHelperuint
	ProductTypeID whereHelperuint
	Quantity      whereHelperuint
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
}{
	TypeID:        whereHelperuint{field: "`blueprint_products`.`type_id`"},
	ActivityID:    whereHelperuint{field: "`blueprint_products`.`activity_id`"},
	ProductTypeID: whereHelperuint{field: "`blueprint_products`.`product_type_id`"},
	Quantity:      whereHelperuint{field: "`blueprint_products`.`quantity`"},
	CreatedAt:     whereHelpertime_Time{field: "`blueprint_products`.`created_at`"},
	UpdatedAt:     whereHelpertime_Time{field: "`blueprint_products`.`updated_at`"},
}

// BlueprintProductRels is where relationship names are stored.
var BlueprintProductRels = struct {
}{}

// blueprintProductR is where relationships are stored.
type blueprintProductR struct {
}

// NewStruct creates a new relationship struct
func (*blueprintProductR) NewStruct() *blueprintProductR {
	return &blueprintProductR{}
}

// blueprintProductL is where Load methods for each relationship are stored.
type blueprintProductL struct{}

var (
	blueprintProductAllColumns            = []string{"type_id", "activity_id", "product_type_id", "quantity", "created_at", "updated_at"}
	blueprintProductColumnsWithoutDefault = []string{"type_id", "activity_id", "product_type_id", "created_at", "updated_at"}
	blueprintProductColumnsWithDefault    = []string{"quantity"}
	blueprintProductPrimaryKeyColumns     = []string{"type_id", "activity_id", "product_type_id"}
)

type (
	// BlueprintProductSlice is an alias for a slice of pointers to BlueprintProduct.
	// This should generally be used opposed to []BlueprintProduct.
	BlueprintProductSlice []*BlueprintProduct

	blueprintProductQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blueprintProductType                 = reflect.TypeOf(&BlueprintProduct{})
	blueprintProductMapping              = queries.MakeStructMapping(blueprintProductType)
	blueprintProductPrimaryKeyMapping, _ = queries.BindMapping(blueprintProductType, blueprintProductMapping, blueprintProductPrimaryKeyColumns)
	blueprintProductInsertCacheMut       sync.RWMutex
	blueprintProductInsertCache          = make(map[string]insertCache)
	blueprintProductUpdateCacheMut       sync.RWMutex
	blueprintProductUpdateCache          = make(map[string]updateCache)
	blueprintProductUpsertCacheMut       sync.RWMutex
	blueprintProductUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single blueprintProduct record from the query.
func (q blueprintProductQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BlueprintProduct, error) {
	o := &BlueprintProduct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for blueprint_products")
	}

	return o, nil
}

// All returns all BlueprintProduct records from the query.
func (q blueprintProductQuery) All(ctx context.Context, exec boil.ContextExecutor) (BlueprintProductSlice, error) {
	var o []*BlueprintProduct

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BlueprintProduct slice")
	}

	return o, nil
}

// Count returns the count of all BlueprintProduct records in the query.
func (q blueprintProductQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count blueprint_products rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blueprintProductQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if blueprint_products exists")
	}

	return count > 0, nil
}

// BlueprintProducts retrieves all the records using an executor.
func BlueprintProducts(mods ...qm.QueryMod) blueprintProductQuery {
	mods = append(mods, qm.From("`blueprint_products`"))
	return blueprintProductQuery{NewQuery(mods...)}
}

// FindBlueprintProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlueprintProduct(ctx context.Context, exec boil.ContextExecutor, typeID uint, activityID uint, productTypeID uint, selectCols ...string) (*BlueprintProduct, error) {
	blueprintProductObj := &BlueprintProduct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `blueprint_products` where `type_id`=? AND `activity_id`=? AND `product_type_id`=?", sel,
	)

	q := queries.Raw(query, typeID, activityID, productTypeID)

	err := q.Bind(ctx, exec, blueprintProductObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from blueprint_products")
	}

	return blueprintProductObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlueprintProduct) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns, ignore bool) error {
	if o == nil {
		return errors.New("boiler: no blueprint_products provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintProductColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blueprintProductInsertCacheMut.RLock()
	cache, cached := blueprintProductInsertCache[key]
	blueprintProductInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blueprintProductAllColumns,
			blueprintProductColumnsWithDefault,
			blueprintProductColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blueprintProductType, blueprintProductMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blueprintProductType, blueprintProductMapping, returnColumns)
		if err != nil {
			return err
		}
		insert := "INSERT%s"
		if ignore {
			insert = fmt.Sprintf(insert, " IGNORE")
		} else {
			insert = fmt.Sprintf(insert, "")
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("%s INTO `blueprint_products` (`%s`) %%sVALUES (%s)%%s", insert, strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			format := "%s INTO `blueprint_products` () VALUES ()%s%s"
			cache.query = fmt.Sprintf(format, insert)
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `blueprint_products` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, blueprintProductPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into blueprint_products")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TypeID,
		o.ActivityID,
		o.ProductTypeID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for blueprint_products")
	}

CacheNoHooks:
	if !cached {
		blueprintProductInsertCacheMut.Lock()
		blueprintProductInsertCache[key] = cache
		blueprintProductInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the BlueprintProduct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlueprintProduct) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	blueprintProductUpdateCacheMut.RLock()
	cache, cached := blueprintProductUpdateCache[key]
	blueprintProductUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blueprintProductAllColumns,
			blueprintProductPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update blueprint_products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `blueprint_products` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, blueprintProductPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blueprintProductType, blueprintProductMapping, append(wl, blueprintProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update blueprint_products row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for blueprint_products")
	}

	if !cached {
		blueprintProductUpdateCacheMut.Lock()
		blueprintProductUpdateCache[key] = cache
		blueprintProductUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q blueprintProductQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for blueprint_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for blueprint_products")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlueprintProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `blueprint_products` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, blueprintProductPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in blueprintProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all blueprintProduct")
	}
	return rowsAff, nil
}

var mySQLBlueprintProductUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlueprintProduct) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_products provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintProductColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBlueprintProductUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blueprintProductUpsertCacheMut.RLock()
	cache, cached := blueprintProductUpsertCache[key]
	blueprintProductUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blueprintProductAllColumns,
			blueprintProductColumnsWithDefault,
			blueprintProductColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			blueprintProductAllColumns,
			blueprintProductPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("boiler: unable to upsert blueprint_products, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "blueprint_products", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `blueprint_products` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(blueprintProductType, blueprintProductMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blueprintProductType, blueprintProductMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert for blueprint_products")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(blueprintProductType, blueprintProductMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to retrieve unique values for blueprint_products")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for blueprint_products")
	}

CacheNoHooks:
	if !cached {
		blueprintProductUpsertCacheMut.Lock()
		blueprintProductUpsertCache[key] = cache
		blueprintProductUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single BlueprintProduct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlueprintProduct) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BlueprintProduct provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blueprintProductPrimaryKeyMapping)
	sql := "DELETE FROM `blueprint_products` WHERE `type_id`=? AND `activity_id`=? AND `product_type_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from blueprint_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for blueprint_products")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blueprintProductQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no blueprintProductQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprint_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_products")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlueprintProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `blueprint_products` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, blueprintProductPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprintProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_products")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlueprintProduct) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBlueprintProduct(ctx, exec, o.TypeID, o.ActivityID, o.ProductTypeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlueprintProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlueprintProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `blueprint_products`.* FROM `blueprint_products` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, blueprintProductPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BlueprintProductSlice")
	}

	*o = slice

	return nil
}

// BlueprintProductExists checks if the BlueprintProduct row exists.
func BlueprintProductExists(ctx context.Context, exec boil.ContextExecutor, typeID uint, activityID uint, productTypeID uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `blueprint_products` where `type_id`=? AND `activity_id`=? AND `product_type_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, typeID, activityID, productTypeID)
	}
	row := exec.QueryRowContext(ctx, sql, typeID, activityID, productTypeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if blueprint_products exists")
	}

	return exists, nil
}
