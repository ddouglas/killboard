// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// KillmailVictim is an object representing the database table.
type KillmailVictim struct {
	ID            uint         `boil:"id" json:"id" toml:"id" yaml:"id"`
	KillmailID    uint         `boil:"killmail_id" json:"killmailID" toml:"killmailID" yaml:"killmailID"`
	AllianceID    null.Uint    `boil:"alliance_id" json:"allianceID,omitempty" toml:"allianceID" yaml:"allianceID,omitempty"`
	CharacterID   null.Uint64  `boil:"character_id" json:"characterID,omitempty" toml:"characterID" yaml:"characterID,omitempty"`
	CorporationID null.Uint    `boil:"corporation_id" json:"corporationID,omitempty" toml:"corporationID" yaml:"corporationID,omitempty"`
	FactionID     null.Uint    `boil:"faction_id" json:"factionID,omitempty" toml:"factionID" yaml:"factionID,omitempty"`
	DamageTaken   uint         `boil:"damage_taken" json:"damageTaken" toml:"damageTaken" yaml:"damageTaken"`
	ShipTypeID    uint         `boil:"ship_type_id" json:"shipTypeID" toml:"shipTypeID" yaml:"shipTypeID"`
	ShipGroupID   uint         `boil:"ship_group_id" json:"shipGroupID" toml:"shipGroupID" yaml:"shipGroupID"`
	ShipValue     float64      `boil:"ship_value" json:"shipValue" toml:"shipValue" yaml:"shipValue"`
	PosX          null.Float64 `boil:"pos_x" json:"posX,omitempty" toml:"posX" yaml:"posX,omitempty"`
	PosY          null.Float64 `boil:"pos_y" json:"posY,omitempty" toml:"posY" yaml:"posY,omitempty"`
	PosZ          null.Float64 `boil:"pos_z" json:"posZ,omitempty" toml:"posZ" yaml:"posZ,omitempty"`
	CreatedAt     time.Time    `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt     time.Time    `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`

	R *killmailVictimR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L killmailVictimL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var KillmailVictimColumns = struct {
	ID            string
	KillmailID    string
	AllianceID    string
	CharacterID   string
	CorporationID string
	FactionID     string
	DamageTaken   string
	ShipTypeID    string
	ShipGroupID   string
	ShipValue     string
	PosX          string
	PosY          string
	PosZ          string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "id",
	KillmailID:    "killmail_id",
	AllianceID:    "alliance_id",
	CharacterID:   "character_id",
	CorporationID: "corporation_id",
	FactionID:     "faction_id",
	DamageTaken:   "damage_taken",
	ShipTypeID:    "ship_type_id",
	ShipGroupID:   "ship_group_id",
	ShipValue:     "ship_value",
	PosX:          "pos_x",
	PosY:          "pos_y",
	PosZ:          "pos_z",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

// Generated where

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var KillmailVictimWhere = struct {
	ID            whereHelperuint
	KillmailID    whereHelperuint
	AllianceID    whereHelpernull_Uint
	CharacterID   whereHelpernull_Uint64
	CorporationID whereHelpernull_Uint
	FactionID     whereHelpernull_Uint
	DamageTaken   whereHelperuint
	ShipTypeID    whereHelperuint
	ShipGroupID   whereHelperuint
	ShipValue     whereHelperfloat64
	PosX          whereHelpernull_Float64
	PosY          whereHelpernull_Float64
	PosZ          whereHelpernull_Float64
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
}{
	ID:            whereHelperuint{field: "`killmail_victim`.`id`"},
	KillmailID:    whereHelperuint{field: "`killmail_victim`.`killmail_id`"},
	AllianceID:    whereHelpernull_Uint{field: "`killmail_victim`.`alliance_id`"},
	CharacterID:   whereHelpernull_Uint64{field: "`killmail_victim`.`character_id`"},
	CorporationID: whereHelpernull_Uint{field: "`killmail_victim`.`corporation_id`"},
	FactionID:     whereHelpernull_Uint{field: "`killmail_victim`.`faction_id`"},
	DamageTaken:   whereHelperuint{field: "`killmail_victim`.`damage_taken`"},
	ShipTypeID:    whereHelperuint{field: "`killmail_victim`.`ship_type_id`"},
	ShipGroupID:   whereHelperuint{field: "`killmail_victim`.`ship_group_id`"},
	ShipValue:     whereHelperfloat64{field: "`killmail_victim`.`ship_value`"},
	PosX:          whereHelpernull_Float64{field: "`killmail_victim`.`pos_x`"},
	PosY:          whereHelpernull_Float64{field: "`killmail_victim`.`pos_y`"},
	PosZ:          whereHelpernull_Float64{field: "`killmail_victim`.`pos_z`"},
	CreatedAt:     whereHelpertime_Time{field: "`killmail_victim`.`created_at`"},
	UpdatedAt:     whereHelpertime_Time{field: "`killmail_victim`.`updated_at`"},
}

// KillmailVictimRels is where relationship names are stored.
var KillmailVictimRels = struct {
}{}

// killmailVictimR is where relationships are stored.
type killmailVictimR struct {
}

// NewStruct creates a new relationship struct
func (*killmailVictimR) NewStruct() *killmailVictimR {
	return &killmailVictimR{}
}

// killmailVictimL is where Load methods for each relationship are stored.
type killmailVictimL struct{}

var (
	killmailVictimAllColumns            = []string{"id", "killmail_id", "alliance_id", "character_id", "corporation_id", "faction_id", "damage_taken", "ship_type_id", "ship_group_id", "ship_value", "pos_x", "pos_y", "pos_z", "created_at", "updated_at"}
	killmailVictimColumnsWithoutDefault = []string{"alliance_id", "character_id", "corporation_id", "faction_id", "ship_type_id", "ship_group_id", "pos_x", "pos_y", "pos_z", "created_at", "updated_at"}
	killmailVictimColumnsWithDefault    = []string{"id", "killmail_id", "damage_taken", "ship_value"}
	killmailVictimPrimaryKeyColumns     = []string{"id"}
)

type (
	// KillmailVictimSlice is an alias for a slice of pointers to KillmailVictim.
	// This should generally be used opposed to []KillmailVictim.
	KillmailVictimSlice []*KillmailVictim

	killmailVictimQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	killmailVictimType                 = reflect.TypeOf(&KillmailVictim{})
	killmailVictimMapping              = queries.MakeStructMapping(killmailVictimType)
	killmailVictimPrimaryKeyMapping, _ = queries.BindMapping(killmailVictimType, killmailVictimMapping, killmailVictimPrimaryKeyColumns)
	killmailVictimInsertCacheMut       sync.RWMutex
	killmailVictimInsertCache          = make(map[string]insertCache)
	killmailVictimUpdateCacheMut       sync.RWMutex
	killmailVictimUpdateCache          = make(map[string]updateCache)
	killmailVictimUpsertCacheMut       sync.RWMutex
	killmailVictimUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single killmailVictim record from the query.
func (q killmailVictimQuery) One(ctx context.Context, exec boil.ContextExecutor) (*KillmailVictim, error) {
	o := &KillmailVictim{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for killmail_victim")
	}

	return o, nil
}

// All returns all KillmailVictim records from the query.
func (q killmailVictimQuery) All(ctx context.Context, exec boil.ContextExecutor) (KillmailVictimSlice, error) {
	var o []*KillmailVictim

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to KillmailVictim slice")
	}

	return o, nil
}

// Count returns the count of all KillmailVictim records in the query.
func (q killmailVictimQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count killmail_victim rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q killmailVictimQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if killmail_victim exists")
	}

	return count > 0, nil
}

// KillmailVictims retrieves all the records using an executor.
func KillmailVictims(mods ...qm.QueryMod) killmailVictimQuery {
	mods = append(mods, qm.From("`killmail_victim`"))
	return killmailVictimQuery{NewQuery(mods...)}
}

// FindKillmailVictim retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindKillmailVictim(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*KillmailVictim, error) {
	killmailVictimObj := &KillmailVictim{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `killmail_victim` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, killmailVictimObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from killmail_victim")
	}

	return killmailVictimObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *KillmailVictim) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns, ignore bool) error {
	if o == nil {
		return errors.New("boiler: no killmail_victim provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(killmailVictimColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	killmailVictimInsertCacheMut.RLock()
	cache, cached := killmailVictimInsertCache[key]
	killmailVictimInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			killmailVictimAllColumns,
			killmailVictimColumnsWithDefault,
			killmailVictimColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(killmailVictimType, killmailVictimMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(killmailVictimType, killmailVictimMapping, returnColumns)
		if err != nil {
			return err
		}
		insert := "INSERT%s"
		if ignore {
			insert = fmt.Sprintf(insert, " IGNORE")
		} else {
			insert = fmt.Sprintf(insert, "")
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("%s INTO `killmail_victim` (`%s`) %%sVALUES (%s)%%s", insert, strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			format := "%s INTO `killmail_victim` () VALUES ()%s%s"
			cache.query = fmt.Sprintf(format, insert)
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `killmail_victim` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, killmailVictimPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into killmail_victim")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == killmailVictimMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for killmail_victim")
	}

CacheNoHooks:
	if !cached {
		killmailVictimInsertCacheMut.Lock()
		killmailVictimInsertCache[key] = cache
		killmailVictimInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the KillmailVictim.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *KillmailVictim) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	killmailVictimUpdateCacheMut.RLock()
	cache, cached := killmailVictimUpdateCache[key]
	killmailVictimUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			killmailVictimAllColumns,
			killmailVictimPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update killmail_victim, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `killmail_victim` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, killmailVictimPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(killmailVictimType, killmailVictimMapping, append(wl, killmailVictimPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update killmail_victim row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for killmail_victim")
	}

	if !cached {
		killmailVictimUpdateCacheMut.Lock()
		killmailVictimUpdateCache[key] = cache
		killmailVictimUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q killmailVictimQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for killmail_victim")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for killmail_victim")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o KillmailVictimSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), killmailVictimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `killmail_victim` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, killmailVictimPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in killmailVictim slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all killmailVictim")
	}
	return rowsAff, nil
}

var mySQLKillmailVictimUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *KillmailVictim) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no killmail_victim provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(killmailVictimColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLKillmailVictimUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	killmailVictimUpsertCacheMut.RLock()
	cache, cached := killmailVictimUpsertCache[key]
	killmailVictimUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			killmailVictimAllColumns,
			killmailVictimColumnsWithDefault,
			killmailVictimColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			killmailVictimAllColumns,
			killmailVictimPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("boiler: unable to upsert killmail_victim, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "killmail_victim", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `killmail_victim` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(killmailVictimType, killmailVictimMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(killmailVictimType, killmailVictimMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert for killmail_victim")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == killmailVictimMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(killmailVictimType, killmailVictimMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to retrieve unique values for killmail_victim")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for killmail_victim")
	}

CacheNoHooks:
	if !cached {
		killmailVictimUpsertCacheMut.Lock()
		killmailVictimUpsertCache[key] = cache
		killmailVictimUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single KillmailVictim record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *KillmailVictim) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no KillmailVictim provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), killmailVictimPrimaryKeyMapping)
	sql := "DELETE FROM `killmail_victim` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from killmail_victim")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for killmail_victim")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q killmailVictimQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no killmailVictimQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from killmail_victim")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for killmail_victim")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o KillmailVictimSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), killmailVictimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `killmail_victim` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, killmailVictimPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from killmailVictim slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for killmail_victim")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *KillmailVictim) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindKillmailVictim(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *KillmailVictimSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := KillmailVictimSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), killmailVictimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `killmail_victim`.* FROM `killmail_victim` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, killmailVictimPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in KillmailVictimSlice")
	}

	*o = slice

	return nil
}

// KillmailVictimExists checks if the KillmailVictim row exists.
func KillmailVictimExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `killmail_victim` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if killmail_victim exists")
	}

	return exists, nil
}
