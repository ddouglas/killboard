// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// PricesBuilt is an object representing the database table.
type PricesBuilt struct {
	TypeID    uint64    `boil:"type_id" json:"typeID" toml:"typeID" yaml:"typeID"`
	Date      time.Time `boil:"date" json:"date" toml:"date" yaml:"date"`
	Price     float64   `boil:"price" json:"price" toml:"price" yaml:"price"`
	CreatedAt time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`

	R *pricesBuiltR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pricesBuiltL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PricesBuiltColumns = struct {
	TypeID    string
	Date      string
	Price     string
	CreatedAt string
	UpdatedAt string
}{
	TypeID:    "type_id",
	Date:      "date",
	Price:     "price",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

// Generated where

var PricesBuiltWhere = struct {
	TypeID    whereHelperuint64
	Date      whereHelpertime_Time
	Price     whereHelperfloat64
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	TypeID:    whereHelperuint64{field: "`prices_built`.`type_id`"},
	Date:      whereHelpertime_Time{field: "`prices_built`.`date`"},
	Price:     whereHelperfloat64{field: "`prices_built`.`price`"},
	CreatedAt: whereHelpertime_Time{field: "`prices_built`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`prices_built`.`updated_at`"},
}

// PricesBuiltRels is where relationship names are stored.
var PricesBuiltRels = struct {
}{}

// pricesBuiltR is where relationships are stored.
type pricesBuiltR struct {
}

// NewStruct creates a new relationship struct
func (*pricesBuiltR) NewStruct() *pricesBuiltR {
	return &pricesBuiltR{}
}

// pricesBuiltL is where Load methods for each relationship are stored.
type pricesBuiltL struct{}

var (
	pricesBuiltAllColumns            = []string{"type_id", "date", "price", "created_at", "updated_at"}
	pricesBuiltColumnsWithoutDefault = []string{"type_id", "date", "price", "created_at", "updated_at"}
	pricesBuiltColumnsWithDefault    = []string{}
	pricesBuiltPrimaryKeyColumns     = []string{"type_id", "date"}
)

type (
	// PricesBuiltSlice is an alias for a slice of pointers to PricesBuilt.
	// This should generally be used opposed to []PricesBuilt.
	PricesBuiltSlice []*PricesBuilt

	pricesBuiltQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pricesBuiltType                 = reflect.TypeOf(&PricesBuilt{})
	pricesBuiltMapping              = queries.MakeStructMapping(pricesBuiltType)
	pricesBuiltPrimaryKeyMapping, _ = queries.BindMapping(pricesBuiltType, pricesBuiltMapping, pricesBuiltPrimaryKeyColumns)
	pricesBuiltInsertCacheMut       sync.RWMutex
	pricesBuiltInsertCache          = make(map[string]insertCache)
	pricesBuiltUpdateCacheMut       sync.RWMutex
	pricesBuiltUpdateCache          = make(map[string]updateCache)
	pricesBuiltUpsertCacheMut       sync.RWMutex
	pricesBuiltUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single pricesBuilt record from the query.
func (q pricesBuiltQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PricesBuilt, error) {
	o := &PricesBuilt{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for prices_built")
	}

	return o, nil
}

// All returns all PricesBuilt records from the query.
func (q pricesBuiltQuery) All(ctx context.Context, exec boil.ContextExecutor) (PricesBuiltSlice, error) {
	var o []*PricesBuilt

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to PricesBuilt slice")
	}

	return o, nil
}

// Count returns the count of all PricesBuilt records in the query.
func (q pricesBuiltQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count prices_built rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pricesBuiltQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if prices_built exists")
	}

	return count > 0, nil
}

// PricesBuilts retrieves all the records using an executor.
func PricesBuilts(mods ...qm.QueryMod) pricesBuiltQuery {
	mods = append(mods, qm.From("`prices_built`"))
	return pricesBuiltQuery{NewQuery(mods...)}
}

// FindPricesBuilt retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPricesBuilt(ctx context.Context, exec boil.ContextExecutor, typeID uint64, date time.Time, selectCols ...string) (*PricesBuilt, error) {
	pricesBuiltObj := &PricesBuilt{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `prices_built` where `type_id`=? AND `date`=?", sel,
	)

	q := queries.Raw(query, typeID, date)

	err := q.Bind(ctx, exec, pricesBuiltObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from prices_built")
	}

	return pricesBuiltObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PricesBuilt) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns, ignore bool) error {
	if o == nil {
		return errors.New("boiler: no prices_built provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(pricesBuiltColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pricesBuiltInsertCacheMut.RLock()
	cache, cached := pricesBuiltInsertCache[key]
	pricesBuiltInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pricesBuiltAllColumns,
			pricesBuiltColumnsWithDefault,
			pricesBuiltColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pricesBuiltType, pricesBuiltMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pricesBuiltType, pricesBuiltMapping, returnColumns)
		if err != nil {
			return err
		}
		insert := "INSERT%s"
		if ignore {
			insert = fmt.Sprintf(insert, " IGNORE")
		} else {
			insert = fmt.Sprintf(insert, "")
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("%s INTO `prices_built` (`%s`) %%sVALUES (%s)%%s", insert, strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = fmt.Sprintf("%s INTO `prices_built` () VALUES ()%s%s", insert)
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `prices_built` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, pricesBuiltPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into prices_built")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TypeID,
		o.Date,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for prices_built")
	}

CacheNoHooks:
	if !cached {
		pricesBuiltInsertCacheMut.Lock()
		pricesBuiltInsertCache[key] = cache
		pricesBuiltInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the PricesBuilt.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PricesBuilt) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	pricesBuiltUpdateCacheMut.RLock()
	cache, cached := pricesBuiltUpdateCache[key]
	pricesBuiltUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pricesBuiltAllColumns,
			pricesBuiltPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update prices_built, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `prices_built` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, pricesBuiltPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pricesBuiltType, pricesBuiltMapping, append(wl, pricesBuiltPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update prices_built row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for prices_built")
	}

	if !cached {
		pricesBuiltUpdateCacheMut.Lock()
		pricesBuiltUpdateCache[key] = cache
		pricesBuiltUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q pricesBuiltQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for prices_built")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for prices_built")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PricesBuiltSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pricesBuiltPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `prices_built` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, pricesBuiltPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in pricesBuilt slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all pricesBuilt")
	}
	return rowsAff, nil
}

var mySQLPricesBuiltUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PricesBuilt) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no prices_built provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(pricesBuiltColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPricesBuiltUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pricesBuiltUpsertCacheMut.RLock()
	cache, cached := pricesBuiltUpsertCache[key]
	pricesBuiltUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pricesBuiltAllColumns,
			pricesBuiltColumnsWithDefault,
			pricesBuiltColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			pricesBuiltAllColumns,
			pricesBuiltPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("boiler: unable to upsert prices_built, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "prices_built", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `prices_built` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(pricesBuiltType, pricesBuiltMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pricesBuiltType, pricesBuiltMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert for prices_built")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(pricesBuiltType, pricesBuiltMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to retrieve unique values for prices_built")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for prices_built")
	}

CacheNoHooks:
	if !cached {
		pricesBuiltUpsertCacheMut.Lock()
		pricesBuiltUpsertCache[key] = cache
		pricesBuiltUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single PricesBuilt record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PricesBuilt) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no PricesBuilt provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pricesBuiltPrimaryKeyMapping)
	sql := "DELETE FROM `prices_built` WHERE `type_id`=? AND `date`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from prices_built")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for prices_built")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pricesBuiltQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no pricesBuiltQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from prices_built")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for prices_built")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PricesBuiltSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pricesBuiltPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `prices_built` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, pricesBuiltPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from pricesBuilt slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for prices_built")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PricesBuilt) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPricesBuilt(ctx, exec, o.TypeID, o.Date)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PricesBuiltSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PricesBuiltSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pricesBuiltPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `prices_built`.* FROM `prices_built` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, pricesBuiltPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in PricesBuiltSlice")
	}

	*o = slice

	return nil
}

// PricesBuiltExists checks if the PricesBuilt row exists.
func PricesBuiltExists(ctx context.Context, exec boil.ContextExecutor, typeID uint64, date time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `prices_built` where `type_id`=? AND `date`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, typeID, date)
	}
	row := exec.QueryRowContext(ctx, sql, typeID, date)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if prices_built exists")
	}

	return exists, nil
}
