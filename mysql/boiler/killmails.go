// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Killmail is an object representing the database table.
type Killmail struct {
	ID            uint64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Hash          string     `boil:"hash" json:"hash" toml:"hash" yaml:"hash"`
	MoonID        null.Int64 `boil:"moon_id" json:"moon_id,omitempty" toml:"moon_id" yaml:"moon_id,omitempty"`
	SolarSystemID uint64     `boil:"solar_system_id" json:"solar_system_id" toml:"solar_system_id" yaml:"solar_system_id"`
	WarID         null.Int64 `boil:"war_id" json:"war_id,omitempty" toml:"war_id" yaml:"war_id,omitempty"`
	KillmailTime  time.Time  `boil:"killmail_time" json:"killmail_time" toml:"killmail_time" yaml:"killmail_time"`
	CreatedAt     time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *killmailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L killmailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var KillmailColumns = struct {
	ID            string
	Hash          string
	MoonID        string
	SolarSystemID string
	WarID         string
	KillmailTime  string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "id",
	Hash:          "hash",
	MoonID:        "moon_id",
	SolarSystemID: "solar_system_id",
	WarID:         "war_id",
	KillmailTime:  "killmail_time",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

// Generated where

var KillmailWhere = struct {
	ID            whereHelperuint64
	Hash          whereHelperstring
	MoonID        whereHelpernull_Int64
	SolarSystemID whereHelperuint64
	WarID         whereHelpernull_Int64
	KillmailTime  whereHelpertime_Time
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
}{
	ID:            whereHelperuint64{field: "`killmails`.`id`"},
	Hash:          whereHelperstring{field: "`killmails`.`hash`"},
	MoonID:        whereHelpernull_Int64{field: "`killmails`.`moon_id`"},
	SolarSystemID: whereHelperuint64{field: "`killmails`.`solar_system_id`"},
	WarID:         whereHelpernull_Int64{field: "`killmails`.`war_id`"},
	KillmailTime:  whereHelpertime_Time{field: "`killmails`.`killmail_time`"},
	CreatedAt:     whereHelpertime_Time{field: "`killmails`.`created_at`"},
	UpdatedAt:     whereHelpertime_Time{field: "`killmails`.`updated_at`"},
}

// KillmailRels is where relationship names are stored.
var KillmailRels = struct {
	KillmailAttackers string
	KillmailItems     string
	KillmailVictims   string
}{
	KillmailAttackers: "KillmailAttackers",
	KillmailItems:     "KillmailItems",
	KillmailVictims:   "KillmailVictims",
}

// killmailR is where relationships are stored.
type killmailR struct {
	KillmailAttackers KillmailAttackerSlice
	KillmailItems     KillmailItemSlice
	KillmailVictims   KillmailVictimSlice
}

// NewStruct creates a new relationship struct
func (*killmailR) NewStruct() *killmailR {
	return &killmailR{}
}

// killmailL is where Load methods for each relationship are stored.
type killmailL struct{}

var (
	killmailAllColumns            = []string{"id", "hash", "moon_id", "solar_system_id", "war_id", "killmail_time", "created_at", "updated_at"}
	killmailColumnsWithoutDefault = []string{"id", "hash", "moon_id", "solar_system_id", "war_id", "killmail_time", "created_at", "updated_at"}
	killmailColumnsWithDefault    = []string{}
	killmailPrimaryKeyColumns     = []string{"id", "hash"}
)

type (
	// KillmailSlice is an alias for a slice of pointers to Killmail.
	// This should generally be used opposed to []Killmail.
	KillmailSlice []*Killmail

	killmailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	killmailType                 = reflect.TypeOf(&Killmail{})
	killmailMapping              = queries.MakeStructMapping(killmailType)
	killmailPrimaryKeyMapping, _ = queries.BindMapping(killmailType, killmailMapping, killmailPrimaryKeyColumns)
	killmailInsertCacheMut       sync.RWMutex
	killmailInsertCache          = make(map[string]insertCache)
	killmailUpdateCacheMut       sync.RWMutex
	killmailUpdateCache          = make(map[string]updateCache)
	killmailUpsertCacheMut       sync.RWMutex
	killmailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single killmail record from the query.
func (q killmailQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Killmail, error) {
	o := &Killmail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for killmails")
	}

	return o, nil
}

// All returns all Killmail records from the query.
func (q killmailQuery) All(ctx context.Context, exec boil.ContextExecutor) (KillmailSlice, error) {
	var o []*Killmail

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Killmail slice")
	}

	return o, nil
}

// Count returns the count of all Killmail records in the query.
func (q killmailQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count killmails rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q killmailQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if killmails exists")
	}

	return count > 0, nil
}

// KillmailAttackers retrieves all the killmail_attacker's KillmailAttackers with an executor.
func (o *Killmail) KillmailAttackers(mods ...qm.QueryMod) killmailAttackerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`killmail_attackers`.`killmail_id`=?", o.ID),
	)

	query := KillmailAttackers(queryMods...)
	queries.SetFrom(query.Query, "`killmail_attackers`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`killmail_attackers`.*"})
	}

	return query
}

// KillmailItems retrieves all the killmail_item's KillmailItems with an executor.
func (o *Killmail) KillmailItems(mods ...qm.QueryMod) killmailItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`killmail_items`.`killmail_id`=?", o.ID),
	)

	query := KillmailItems(queryMods...)
	queries.SetFrom(query.Query, "`killmail_items`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`killmail_items`.*"})
	}

	return query
}

// KillmailVictims retrieves all the killmail_victim's KillmailVictims with an executor.
func (o *Killmail) KillmailVictims(mods ...qm.QueryMod) killmailVictimQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`killmail_victim`.`killmail_id`=?", o.ID),
	)

	query := KillmailVictims(queryMods...)
	queries.SetFrom(query.Query, "`killmail_victim`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`killmail_victim`.*"})
	}

	return query
}

// LoadKillmailAttackers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (killmailL) LoadKillmailAttackers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeKillmail interface{}, mods queries.Applicator) error {
	var slice []*Killmail
	var object *Killmail

	if singular {
		object = maybeKillmail.(*Killmail)
	} else {
		slice = *maybeKillmail.(*[]*Killmail)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &killmailR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &killmailR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`killmail_attackers`), qm.WhereIn(`killmail_attackers.killmail_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load killmail_attackers")
	}

	var resultSlice []*KillmailAttacker
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice killmail_attackers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on killmail_attackers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for killmail_attackers")
	}

	if singular {
		object.R.KillmailAttackers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &killmailAttackerR{}
			}
			foreign.R.Killmail = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.KillmailID {
				local.R.KillmailAttackers = append(local.R.KillmailAttackers, foreign)
				if foreign.R == nil {
					foreign.R = &killmailAttackerR{}
				}
				foreign.R.Killmail = local
				break
			}
		}
	}

	return nil
}

// LoadKillmailItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (killmailL) LoadKillmailItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeKillmail interface{}, mods queries.Applicator) error {
	var slice []*Killmail
	var object *Killmail

	if singular {
		object = maybeKillmail.(*Killmail)
	} else {
		slice = *maybeKillmail.(*[]*Killmail)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &killmailR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &killmailR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`killmail_items`), qm.WhereIn(`killmail_items.killmail_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load killmail_items")
	}

	var resultSlice []*KillmailItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice killmail_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on killmail_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for killmail_items")
	}

	if singular {
		object.R.KillmailItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &killmailItemR{}
			}
			foreign.R.Killmail = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.KillmailID {
				local.R.KillmailItems = append(local.R.KillmailItems, foreign)
				if foreign.R == nil {
					foreign.R = &killmailItemR{}
				}
				foreign.R.Killmail = local
				break
			}
		}
	}

	return nil
}

// LoadKillmailVictims allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (killmailL) LoadKillmailVictims(ctx context.Context, e boil.ContextExecutor, singular bool, maybeKillmail interface{}, mods queries.Applicator) error {
	var slice []*Killmail
	var object *Killmail

	if singular {
		object = maybeKillmail.(*Killmail)
	} else {
		slice = *maybeKillmail.(*[]*Killmail)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &killmailR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &killmailR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`killmail_victim`), qm.WhereIn(`killmail_victim.killmail_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load killmail_victim")
	}

	var resultSlice []*KillmailVictim
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice killmail_victim")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on killmail_victim")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for killmail_victim")
	}

	if singular {
		object.R.KillmailVictims = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &killmailVictimR{}
			}
			foreign.R.Killmail = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.KillmailID {
				local.R.KillmailVictims = append(local.R.KillmailVictims, foreign)
				if foreign.R == nil {
					foreign.R = &killmailVictimR{}
				}
				foreign.R.Killmail = local
				break
			}
		}
	}

	return nil
}

// AddKillmailAttackers adds the given related objects to the existing relationships
// of the killmail, optionally inserting them as new records.
// Appends related to o.R.KillmailAttackers.
// Sets related.R.Killmail appropriately.
func (o *Killmail) AddKillmailAttackers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*KillmailAttacker) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.KillmailID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `killmail_attackers` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"killmail_id"}),
				strmangle.WhereClause("`", "`", 0, killmailAttackerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.KillmailID = o.ID
		}
	}

	if o.R == nil {
		o.R = &killmailR{
			KillmailAttackers: related,
		}
	} else {
		o.R.KillmailAttackers = append(o.R.KillmailAttackers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &killmailAttackerR{
				Killmail: o,
			}
		} else {
			rel.R.Killmail = o
		}
	}
	return nil
}

// AddKillmailItems adds the given related objects to the existing relationships
// of the killmail, optionally inserting them as new records.
// Appends related to o.R.KillmailItems.
// Sets related.R.Killmail appropriately.
func (o *Killmail) AddKillmailItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*KillmailItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.KillmailID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `killmail_items` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"killmail_id"}),
				strmangle.WhereClause("`", "`", 0, killmailItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.KillmailID = o.ID
		}
	}

	if o.R == nil {
		o.R = &killmailR{
			KillmailItems: related,
		}
	} else {
		o.R.KillmailItems = append(o.R.KillmailItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &killmailItemR{
				Killmail: o,
			}
		} else {
			rel.R.Killmail = o
		}
	}
	return nil
}

// AddKillmailVictims adds the given related objects to the existing relationships
// of the killmail, optionally inserting them as new records.
// Appends related to o.R.KillmailVictims.
// Sets related.R.Killmail appropriately.
func (o *Killmail) AddKillmailVictims(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*KillmailVictim) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.KillmailID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `killmail_victim` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"killmail_id"}),
				strmangle.WhereClause("`", "`", 0, killmailVictimPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.KillmailID = o.ID
		}
	}

	if o.R == nil {
		o.R = &killmailR{
			KillmailVictims: related,
		}
	} else {
		o.R.KillmailVictims = append(o.R.KillmailVictims, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &killmailVictimR{
				Killmail: o,
			}
		} else {
			rel.R.Killmail = o
		}
	}
	return nil
}

// Killmails retrieves all the records using an executor.
func Killmails(mods ...qm.QueryMod) killmailQuery {
	mods = append(mods, qm.From("`killmails`"))
	return killmailQuery{NewQuery(mods...)}
}

// FindKillmail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindKillmail(ctx context.Context, exec boil.ContextExecutor, iD uint64, hash string, selectCols ...string) (*Killmail, error) {
	killmailObj := &Killmail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `killmails` where `id`=? AND `hash`=?", sel,
	)

	q := queries.Raw(query, iD, hash)

	err := q.Bind(ctx, exec, killmailObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from killmails")
	}

	return killmailObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Killmail) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no killmails provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(killmailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	killmailInsertCacheMut.RLock()
	cache, cached := killmailInsertCache[key]
	killmailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			killmailAllColumns,
			killmailColumnsWithDefault,
			killmailColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(killmailType, killmailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(killmailType, killmailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `killmails` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `killmails` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `killmails` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, killmailPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into killmails")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
		o.Hash,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for killmails")
	}

CacheNoHooks:
	if !cached {
		killmailInsertCacheMut.Lock()
		killmailInsertCache[key] = cache
		killmailInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Killmail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Killmail) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	killmailUpdateCacheMut.RLock()
	cache, cached := killmailUpdateCache[key]
	killmailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			killmailAllColumns,
			killmailPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update killmails, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `killmails` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, killmailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(killmailType, killmailMapping, append(wl, killmailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update killmails row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for killmails")
	}

	if !cached {
		killmailUpdateCacheMut.Lock()
		killmailUpdateCache[key] = cache
		killmailUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q killmailQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for killmails")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for killmails")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o KillmailSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), killmailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `killmails` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, killmailPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in killmail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all killmail")
	}
	return rowsAff, nil
}

var mySQLKillmailUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Killmail) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no killmails provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(killmailColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLKillmailUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	killmailUpsertCacheMut.RLock()
	cache, cached := killmailUpsertCache[key]
	killmailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			killmailAllColumns,
			killmailColumnsWithDefault,
			killmailColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			killmailAllColumns,
			killmailPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("boiler: unable to upsert killmails, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "killmails", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `killmails` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(killmailType, killmailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(killmailType, killmailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert for killmails")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(killmailType, killmailMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to retrieve unique values for killmails")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for killmails")
	}

CacheNoHooks:
	if !cached {
		killmailUpsertCacheMut.Lock()
		killmailUpsertCache[key] = cache
		killmailUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Killmail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Killmail) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Killmail provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), killmailPrimaryKeyMapping)
	sql := "DELETE FROM `killmails` WHERE `id`=? AND `hash`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from killmails")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for killmails")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q killmailQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no killmailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from killmails")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for killmails")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o KillmailSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), killmailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `killmails` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, killmailPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from killmail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for killmails")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Killmail) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindKillmail(ctx, exec, o.ID, o.Hash)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *KillmailSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := KillmailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), killmailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `killmails`.* FROM `killmails` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, killmailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in KillmailSlice")
	}

	*o = slice

	return nil
}

// KillmailExists checks if the Killmail row exists.
func KillmailExists(ctx context.Context, exec boil.ContextExecutor, iD uint64, hash string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `killmails` where `id`=? AND `hash`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD, hash)
	}
	row := exec.QueryRowContext(ctx, sql, iD, hash)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if killmails exists")
	}

	return exists, nil
}
