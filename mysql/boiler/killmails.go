// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Killmail is an object representing the database table.
type Killmail struct {
	ID              uint      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Hash            string    `boil:"hash" json:"hash" toml:"hash" yaml:"hash"`
	MoonID          null.Uint `boil:"moon_id" json:"moonID,omitempty" toml:"moonID" yaml:"moonID,omitempty"`
	SolarSystemID   uint      `boil:"solar_system_id" json:"solarSystemID" toml:"solarSystemID" yaml:"solarSystemID"`
	ConstellationID uint      `boil:"constellation_id" json:"constellationID" toml:"constellationID" yaml:"constellationID"`
	RegionID        uint      `boil:"region_id" json:"regionID" toml:"regionID" yaml:"regionID"`
	WarID           null.Uint `boil:"war_id" json:"warID,omitempty" toml:"warID" yaml:"warID,omitempty"`
	IsNPC           bool      `boil:"is_npc" json:"isNPC" toml:"isNPC" yaml:"isNPC"`
	IsAwox          bool      `boil:"is_awox" json:"isAwox" toml:"isAwox" yaml:"isAwox"`
	IsSolo          bool      `boil:"is_solo" json:"isSolo" toml:"isSolo" yaml:"isSolo"`
	DroppedValue    float64   `boil:"dropped_value" json:"droppedValue" toml:"droppedValue" yaml:"droppedValue"`
	DestroyedValue  float64   `boil:"destroyed_value" json:"destroyedValue" toml:"destroyedValue" yaml:"destroyedValue"`
	FittedValue     float64   `boil:"fitted_value" json:"fittedValue" toml:"fittedValue" yaml:"fittedValue"`
	TotalValue      float64   `boil:"total_value" json:"totalValue" toml:"totalValue" yaml:"totalValue"`
	KillmailTime    time.Time `boil:"killmail_time" json:"killmailTime" toml:"killmailTime" yaml:"killmailTime"`
	CreatedAt       time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt       time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`

	R *killmailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L killmailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var KillmailColumns = struct {
	ID              string
	Hash            string
	MoonID          string
	SolarSystemID   string
	ConstellationID string
	RegionID        string
	WarID           string
	IsNPC           string
	IsAwox          string
	IsSolo          string
	DroppedValue    string
	DestroyedValue  string
	FittedValue     string
	TotalValue      string
	KillmailTime    string
	CreatedAt       string
	UpdatedAt       string
}{
	ID:              "id",
	Hash:            "hash",
	MoonID:          "moon_id",
	SolarSystemID:   "solar_system_id",
	ConstellationID: "constellation_id",
	RegionID:        "region_id",
	WarID:           "war_id",
	IsNPC:           "is_npc",
	IsAwox:          "is_awox",
	IsSolo:          "is_solo",
	DroppedValue:    "dropped_value",
	DestroyedValue:  "destroyed_value",
	FittedValue:     "fitted_value",
	TotalValue:      "total_value",
	KillmailTime:    "killmail_time",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
}

// Generated where

var KillmailWhere = struct {
	ID              whereHelperuint
	Hash            whereHelperstring
	MoonID          whereHelpernull_Uint
	SolarSystemID   whereHelperuint
	ConstellationID whereHelperuint
	RegionID        whereHelperuint
	WarID           whereHelpernull_Uint
	IsNPC           whereHelperbool
	IsAwox          whereHelperbool
	IsSolo          whereHelperbool
	DroppedValue    whereHelperfloat64
	DestroyedValue  whereHelperfloat64
	FittedValue     whereHelperfloat64
	TotalValue      whereHelperfloat64
	KillmailTime    whereHelpertime_Time
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
}{
	ID:              whereHelperuint{field: "`killmails`.`id`"},
	Hash:            whereHelperstring{field: "`killmails`.`hash`"},
	MoonID:          whereHelpernull_Uint{field: "`killmails`.`moon_id`"},
	SolarSystemID:   whereHelperuint{field: "`killmails`.`solar_system_id`"},
	ConstellationID: whereHelperuint{field: "`killmails`.`constellation_id`"},
	RegionID:        whereHelperuint{field: "`killmails`.`region_id`"},
	WarID:           whereHelpernull_Uint{field: "`killmails`.`war_id`"},
	IsNPC:           whereHelperbool{field: "`killmails`.`is_npc`"},
	IsAwox:          whereHelperbool{field: "`killmails`.`is_awox`"},
	IsSolo:          whereHelperbool{field: "`killmails`.`is_solo`"},
	DroppedValue:    whereHelperfloat64{field: "`killmails`.`dropped_value`"},
	DestroyedValue:  whereHelperfloat64{field: "`killmails`.`destroyed_value`"},
	FittedValue:     whereHelperfloat64{field: "`killmails`.`fitted_value`"},
	TotalValue:      whereHelperfloat64{field: "`killmails`.`total_value`"},
	KillmailTime:    whereHelpertime_Time{field: "`killmails`.`killmail_time`"},
	CreatedAt:       whereHelpertime_Time{field: "`killmails`.`created_at`"},
	UpdatedAt:       whereHelpertime_Time{field: "`killmails`.`updated_at`"},
}

// KillmailRels is where relationship names are stored.
var KillmailRels = struct {
}{}

// killmailR is where relationships are stored.
type killmailR struct {
}

// NewStruct creates a new relationship struct
func (*killmailR) NewStruct() *killmailR {
	return &killmailR{}
}

// killmailL is where Load methods for each relationship are stored.
type killmailL struct{}

var (
	killmailAllColumns            = []string{"id", "hash", "moon_id", "solar_system_id", "constellation_id", "region_id", "war_id", "is_npc", "is_awox", "is_solo", "dropped_value", "destroyed_value", "fitted_value", "total_value", "killmail_time", "created_at", "updated_at"}
	killmailColumnsWithoutDefault = []string{"id", "hash", "moon_id", "constellation_id", "region_id", "war_id", "killmail_time", "created_at", "updated_at"}
	killmailColumnsWithDefault    = []string{"solar_system_id", "is_npc", "is_awox", "is_solo", "dropped_value", "destroyed_value", "fitted_value", "total_value"}
	killmailPrimaryKeyColumns     = []string{"id"}
)

type (
	// KillmailSlice is an alias for a slice of pointers to Killmail.
	// This should generally be used opposed to []Killmail.
	KillmailSlice []*Killmail

	killmailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	killmailType                 = reflect.TypeOf(&Killmail{})
	killmailMapping              = queries.MakeStructMapping(killmailType)
	killmailPrimaryKeyMapping, _ = queries.BindMapping(killmailType, killmailMapping, killmailPrimaryKeyColumns)
	killmailInsertCacheMut       sync.RWMutex
	killmailInsertCache          = make(map[string]insertCache)
	killmailUpdateCacheMut       sync.RWMutex
	killmailUpdateCache          = make(map[string]updateCache)
	killmailUpsertCacheMut       sync.RWMutex
	killmailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single killmail record from the query.
func (q killmailQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Killmail, error) {
	o := &Killmail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for killmails")
	}

	return o, nil
}

// All returns all Killmail records from the query.
func (q killmailQuery) All(ctx context.Context, exec boil.ContextExecutor) (KillmailSlice, error) {
	var o []*Killmail

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to Killmail slice")
	}

	return o, nil
}

// Count returns the count of all Killmail records in the query.
func (q killmailQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count killmails rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q killmailQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if killmails exists")
	}

	return count > 0, nil
}

// Killmails retrieves all the records using an executor.
func Killmails(mods ...qm.QueryMod) killmailQuery {
	mods = append(mods, qm.From("`killmails`"))
	return killmailQuery{NewQuery(mods...)}
}

// FindKillmail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindKillmail(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*Killmail, error) {
	killmailObj := &Killmail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `killmails` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, killmailObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from killmails")
	}

	return killmailObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Killmail) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns, ignore bool) error {
	if o == nil {
		return errors.New("boiler: no killmails provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(killmailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	killmailInsertCacheMut.RLock()
	cache, cached := killmailInsertCache[key]
	killmailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			killmailAllColumns,
			killmailColumnsWithDefault,
			killmailColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(killmailType, killmailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(killmailType, killmailMapping, returnColumns)
		if err != nil {
			return err
		}
		insert := "INSERT%s"
		if ignore {
			insert = fmt.Sprintf(insert, " IGNORE")
		} else {
			insert = fmt.Sprintf(insert, "")
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("%s INTO `killmails` (`%s`) %%sVALUES (%s)%%s", insert, strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			format := "%s INTO `killmails` () VALUES ()%s%s"
			cache.query = fmt.Sprintf(format, insert)
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `killmails` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, killmailPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into killmails")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for killmails")
	}

CacheNoHooks:
	if !cached {
		killmailInsertCacheMut.Lock()
		killmailInsertCache[key] = cache
		killmailInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Killmail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Killmail) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	killmailUpdateCacheMut.RLock()
	cache, cached := killmailUpdateCache[key]
	killmailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			killmailAllColumns,
			killmailPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update killmails, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `killmails` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, killmailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(killmailType, killmailMapping, append(wl, killmailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update killmails row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for killmails")
	}

	if !cached {
		killmailUpdateCacheMut.Lock()
		killmailUpdateCache[key] = cache
		killmailUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q killmailQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for killmails")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for killmails")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o KillmailSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), killmailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `killmails` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, killmailPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in killmail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all killmail")
	}
	return rowsAff, nil
}

var mySQLKillmailUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Killmail) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no killmails provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(killmailColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLKillmailUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	killmailUpsertCacheMut.RLock()
	cache, cached := killmailUpsertCache[key]
	killmailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			killmailAllColumns,
			killmailColumnsWithDefault,
			killmailColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			killmailAllColumns,
			killmailPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("boiler: unable to upsert killmails, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "killmails", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `killmails` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(killmailType, killmailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(killmailType, killmailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert for killmails")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(killmailType, killmailMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to retrieve unique values for killmails")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for killmails")
	}

CacheNoHooks:
	if !cached {
		killmailUpsertCacheMut.Lock()
		killmailUpsertCache[key] = cache
		killmailUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Killmail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Killmail) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no Killmail provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), killmailPrimaryKeyMapping)
	sql := "DELETE FROM `killmails` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from killmails")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for killmails")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q killmailQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no killmailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from killmails")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for killmails")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o KillmailSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), killmailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `killmails` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, killmailPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from killmail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for killmails")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Killmail) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindKillmail(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *KillmailSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := KillmailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), killmailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `killmails`.* FROM `killmails` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, killmailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in KillmailSlice")
	}

	*o = slice

	return nil
}

// KillmailExists checks if the Killmail row exists.
func KillmailExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `killmails` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if killmails exists")
	}

	return exists, nil
}
