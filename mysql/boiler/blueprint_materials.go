// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package boiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// BlueprintMaterial is an object representing the database table.
type BlueprintMaterial struct {
	TypeID         uint64    `boil:"type_id" json:"typeID" toml:"typeID" yaml:"typeID"`
	ActivityID     uint64    `boil:"activity_id" json:"activityID" toml:"activityID" yaml:"activityID"`
	MaterialTypeID uint64    `boil:"material_type_id" json:"materialTypeID" toml:"materialTypeID" yaml:"materialTypeID"`
	Quantity       uint64    `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	CreatedAt      time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`

	R *blueprintMaterialR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L blueprintMaterialL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlueprintMaterialColumns = struct {
	TypeID         string
	ActivityID     string
	MaterialTypeID string
	Quantity       string
	CreatedAt      string
	UpdatedAt      string
}{
	TypeID:         "type_id",
	ActivityID:     "activity_id",
	MaterialTypeID: "material_type_id",
	Quantity:       "quantity",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

// Generated where

var BlueprintMaterialWhere = struct {
	TypeID         whereHelperuint64
	ActivityID     whereHelperuint64
	MaterialTypeID whereHelperuint64
	Quantity       whereHelperuint64
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
}{
	TypeID:         whereHelperuint64{field: "`blueprint_materials`.`type_id`"},
	ActivityID:     whereHelperuint64{field: "`blueprint_materials`.`activity_id`"},
	MaterialTypeID: whereHelperuint64{field: "`blueprint_materials`.`material_type_id`"},
	Quantity:       whereHelperuint64{field: "`blueprint_materials`.`quantity`"},
	CreatedAt:      whereHelpertime_Time{field: "`blueprint_materials`.`created_at`"},
	UpdatedAt:      whereHelpertime_Time{field: "`blueprint_materials`.`updated_at`"},
}

// BlueprintMaterialRels is where relationship names are stored.
var BlueprintMaterialRels = struct {
}{}

// blueprintMaterialR is where relationships are stored.
type blueprintMaterialR struct {
}

// NewStruct creates a new relationship struct
func (*blueprintMaterialR) NewStruct() *blueprintMaterialR {
	return &blueprintMaterialR{}
}

// blueprintMaterialL is where Load methods for each relationship are stored.
type blueprintMaterialL struct{}

var (
	blueprintMaterialAllColumns            = []string{"type_id", "activity_id", "material_type_id", "quantity", "created_at", "updated_at"}
	blueprintMaterialColumnsWithoutDefault = []string{"type_id", "activity_id", "material_type_id", "quantity", "created_at", "updated_at"}
	blueprintMaterialColumnsWithDefault    = []string{}
	blueprintMaterialPrimaryKeyColumns     = []string{"type_id", "activity_id", "material_type_id"}
)

type (
	// BlueprintMaterialSlice is an alias for a slice of pointers to BlueprintMaterial.
	// This should generally be used opposed to []BlueprintMaterial.
	BlueprintMaterialSlice []*BlueprintMaterial

	blueprintMaterialQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blueprintMaterialType                 = reflect.TypeOf(&BlueprintMaterial{})
	blueprintMaterialMapping              = queries.MakeStructMapping(blueprintMaterialType)
	blueprintMaterialPrimaryKeyMapping, _ = queries.BindMapping(blueprintMaterialType, blueprintMaterialMapping, blueprintMaterialPrimaryKeyColumns)
	blueprintMaterialInsertCacheMut       sync.RWMutex
	blueprintMaterialInsertCache          = make(map[string]insertCache)
	blueprintMaterialUpdateCacheMut       sync.RWMutex
	blueprintMaterialUpdateCache          = make(map[string]updateCache)
	blueprintMaterialUpsertCacheMut       sync.RWMutex
	blueprintMaterialUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single blueprintMaterial record from the query.
func (q blueprintMaterialQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BlueprintMaterial, error) {
	o := &BlueprintMaterial{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: failed to execute a one query for blueprint_materials")
	}

	return o, nil
}

// All returns all BlueprintMaterial records from the query.
func (q blueprintMaterialQuery) All(ctx context.Context, exec boil.ContextExecutor) (BlueprintMaterialSlice, error) {
	var o []*BlueprintMaterial

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "boiler: failed to assign all query results to BlueprintMaterial slice")
	}

	return o, nil
}

// Count returns the count of all BlueprintMaterial records in the query.
func (q blueprintMaterialQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to count blueprint_materials rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blueprintMaterialQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "boiler: failed to check if blueprint_materials exists")
	}

	return count > 0, nil
}

// BlueprintMaterials retrieves all the records using an executor.
func BlueprintMaterials(mods ...qm.QueryMod) blueprintMaterialQuery {
	mods = append(mods, qm.From("`blueprint_materials`"))
	return blueprintMaterialQuery{NewQuery(mods...)}
}

// FindBlueprintMaterial retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlueprintMaterial(ctx context.Context, exec boil.ContextExecutor, typeID uint64, activityID uint64, materialTypeID uint64, selectCols ...string) (*BlueprintMaterial, error) {
	blueprintMaterialObj := &BlueprintMaterial{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `blueprint_materials` where `type_id`=? AND `activity_id`=? AND `material_type_id`=?", sel,
	)

	q := queries.Raw(query, typeID, activityID, materialTypeID)

	err := q.Bind(ctx, exec, blueprintMaterialObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "boiler: unable to select from blueprint_materials")
	}

	return blueprintMaterialObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BlueprintMaterial) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_materials provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintMaterialColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blueprintMaterialInsertCacheMut.RLock()
	cache, cached := blueprintMaterialInsertCache[key]
	blueprintMaterialInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blueprintMaterialAllColumns,
			blueprintMaterialColumnsWithDefault,
			blueprintMaterialColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blueprintMaterialType, blueprintMaterialMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blueprintMaterialType, blueprintMaterialMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `blueprint_materials` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `blueprint_materials` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `blueprint_materials` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, blueprintMaterialPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to insert into blueprint_materials")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TypeID,
		o.ActivityID,
		o.MaterialTypeID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for blueprint_materials")
	}

CacheNoHooks:
	if !cached {
		blueprintMaterialInsertCacheMut.Lock()
		blueprintMaterialInsertCache[key] = cache
		blueprintMaterialInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the BlueprintMaterial.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BlueprintMaterial) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	blueprintMaterialUpdateCacheMut.RLock()
	cache, cached := blueprintMaterialUpdateCache[key]
	blueprintMaterialUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blueprintMaterialAllColumns,
			blueprintMaterialPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("boiler: unable to update blueprint_materials, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `blueprint_materials` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, blueprintMaterialPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blueprintMaterialType, blueprintMaterialMapping, append(wl, blueprintMaterialPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update blueprint_materials row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by update for blueprint_materials")
	}

	if !cached {
		blueprintMaterialUpdateCacheMut.Lock()
		blueprintMaterialUpdateCache[key] = cache
		blueprintMaterialUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q blueprintMaterialQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all for blueprint_materials")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected for blueprint_materials")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlueprintMaterialSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("boiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintMaterialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `blueprint_materials` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, blueprintMaterialPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to update all in blueprintMaterial slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to retrieve rows affected all in update all blueprintMaterial")
	}
	return rowsAff, nil
}

var mySQLBlueprintMaterialUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BlueprintMaterial) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("boiler: no blueprint_materials provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(blueprintMaterialColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBlueprintMaterialUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blueprintMaterialUpsertCacheMut.RLock()
	cache, cached := blueprintMaterialUpsertCache[key]
	blueprintMaterialUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blueprintMaterialAllColumns,
			blueprintMaterialColumnsWithDefault,
			blueprintMaterialColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			blueprintMaterialAllColumns,
			blueprintMaterialPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("boiler: unable to upsert blueprint_materials, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "blueprint_materials", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `blueprint_materials` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(blueprintMaterialType, blueprintMaterialMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blueprintMaterialType, blueprintMaterialMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "boiler: unable to upsert for blueprint_materials")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(blueprintMaterialType, blueprintMaterialMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to retrieve unique values for blueprint_materials")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to populate default values for blueprint_materials")
	}

CacheNoHooks:
	if !cached {
		blueprintMaterialUpsertCacheMut.Lock()
		blueprintMaterialUpsertCache[key] = cache
		blueprintMaterialUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single BlueprintMaterial record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BlueprintMaterial) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("boiler: no BlueprintMaterial provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blueprintMaterialPrimaryKeyMapping)
	sql := "DELETE FROM `blueprint_materials` WHERE `type_id`=? AND `activity_id`=? AND `material_type_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete from blueprint_materials")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by delete for blueprint_materials")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blueprintMaterialQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("boiler: no blueprintMaterialQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprint_materials")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_materials")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlueprintMaterialSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintMaterialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `blueprint_materials` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, blueprintMaterialPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "boiler: unable to delete all from blueprintMaterial slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "boiler: failed to get rows affected by deleteall for blueprint_materials")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BlueprintMaterial) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBlueprintMaterial(ctx, exec, o.TypeID, o.ActivityID, o.MaterialTypeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlueprintMaterialSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlueprintMaterialSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blueprintMaterialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `blueprint_materials`.* FROM `blueprint_materials` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, blueprintMaterialPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "boiler: unable to reload all in BlueprintMaterialSlice")
	}

	*o = slice

	return nil
}

// BlueprintMaterialExists checks if the BlueprintMaterial row exists.
func BlueprintMaterialExists(ctx context.Context, exec boil.ContextExecutor, typeID uint64, activityID uint64, materialTypeID uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `blueprint_materials` where `type_id`=? AND `activity_id`=? AND `material_type_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, typeID, activityID, materialTypeID)
	}
	row := exec.QueryRowContext(ctx, sql, typeID, activityID, materialTypeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "boiler: unable to check if blueprint_materials exists")
	}

	return exists, nil
}
